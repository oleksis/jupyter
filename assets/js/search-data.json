{
  
    
        "post0": {
            "title": "PyBites Selenium Template for Exercises",
            "content": "Intro . Este notebook se podrá usar como plantilla para resolver los ejercicios PyBites de la plataforma codechalleng.es . Pre-requerimientos . Tener una licencia válida para poder acceder al ejercicio (Bite) completo. | Intalar chromium-chromedriver y configurarlo. | Instalar Selenium. | . Uso . Establecer como variable de entorno del sistema global tu USERNAME y PASSWORD de la plataforma codechalleng.es (Celda #1) | Realizar el proceso de Login en la plataforma codechalleg.es ejecutando la (Celda #2) | Establecer el número del ejercicio (BITE_NUM) a resolver (Celda #3) | Mostrar el contenido del archivo PB_FILE utilizando el comando !cat (Celda #4) | Imprimir el nombre del archivo (BITE_NAME) (Celda #5) | Sobrescribir el archivo (BITE_NAME) con la solución utilizando el comando mágico de celda %%writefile (Celda #6) | Asegurarse de pasar las pruebas (PB_TEST) utilizando pytest (Celda #7) | Salvar la solución (CODE) y ejecutar las pruebas en la plataforma codechalleng.es (Celda #8) | Resolver otros ejercicios, repetir el proceso a partir de la* (Celda #3)** | . # Install Chromium, its Driver, and Selenium # https://gist.github.com/korakot/5c8e21a5af63966d80a676af0ce15067 !apt install chromium-chromedriver !pip install selenium %env PB_USER=YOUR_USERNAME %env PB_PW=YOUR_PASSWORD . # Platform Login Selenium # https://gist.github.com/pybites/0aa6d9833849a0942ed218b1d46c47b4#file-platform_login_selenium-py import os from IPython.display import HTML # make venv and pip install selenium from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.common.action_chains import ActionChains from selenium.webdriver.common.keys import Keys from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC # Set your codechalleng.es username and password in venv/bin/activate, then source it USERNAME = os.getenv(&quot;PB_USER&quot;) or &quot;YOUR_USERNAME&quot; PASSWORD = os.getenv(&quot;PB_PW&quot;) or &quot;YOUR_PASSWORD&quot; BASE_URL = &quot;https://codechalleng.es&quot; LOGIN_URL = f&quot;{BASE_URL}/login/&quot; WAIT_SECONDS = 2 CODE_TEMPLATE = &quot;&quot; TEST_NAME = &quot;&quot; CODE_TEST = &quot;&quot; # Set options to be headless, .. options = webdriver.ChromeOptions() options.add_argument(&#39;--headless&#39;) options.add_argument(&#39;--no-sandbox&#39;) options.add_argument(&#39;--disable-dev-shm-usage&#39;) # Open it, go to a website, and get results driver = webdriver.Chrome(&#39;chromedriver&#39;, options=options) driver.get(LOGIN_URL) driver.find_element_by_name(&#39;username&#39;).send_keys(USERNAME) driver.find_element_by_name(&#39;password&#39;).send_keys(PASSWORD + Keys.RETURN) print(&quot;You are being logged&quot;) . You are being logged . # I am logged in, let go to a Bite # Set your Bite to code BITE_NUM = 110 PYBITES_BITE_URL = f&quot;{BASE_URL}/bites/{BITE_NUM}&quot; driver.get(PYBITES_BITE_URL) # do your thing #_html = driver.page_source #print(_html) contentWrapperElement = driver.find_element_by_css_selector(&quot;div.mui-col-md-8&quot;) contentWrapperElement = contentWrapperElement.get_attribute(&quot;innerHTML&quot;) # Implicit Wait driver.implicitly_wait(WAIT_SECONDS) element = driver.find_element_by_name(&quot;template_code&quot;) CODE_TEMPLATE = element.get_attribute(&quot;value&quot;) element = driver.find_element_by_xpath(&quot;//a[@data-mui-controls=&#39;pane-default-2&#39;]/span&quot;) element.click() TEST_NAME = element.text TEST_NAME = TEST_NAME.strip(&quot;(&quot;).strip(&quot;)&quot;) driver.execute_script(&quot;mui.tabs.activate(&#39;pane-default-2&#39;)&quot;) # Simular Copy/Paste en Selenium # Copy cb = driver.execute_script(&quot;return copyTestToClipBoard();&quot;) alert = driver.switch_to.alert alert.accept() driver.switch_to.default_content # Crear textArea js = &quot;&quot;&quot; function createTextArea(){ var tArea = document.createElement(&#39;textarea&#39;); tArea.id = &#39;myTestCode&#39;; var pane = document.getElementById(&#39;pane-default-2&#39;); pane.appendChild(tArea); } createTextArea(); &quot;&quot;&quot; cb = driver.execute_script(js) # Paste textAreaElement = driver.find_element_by_id(&quot;myTestCode&quot;) textAreaElement.click() textAreaElement.send_keys(Keys.CONTROL + &quot;v&quot;) CODE_TEST = textAreaElement.get_property(&quot;value&quot;) BITE_NAME = TEST_NAME.split(&quot;test_&quot;)[1] with open(BITE_NAME, &quot;w&quot;) as file: file.write(CODE_TEMPLATE) os.environ[&quot;PB_FILE&quot;] = BITE_NAME with open(TEST_NAME, &quot;w&quot;) as file: file.write(CODE_TEST) os.environ[&quot;PB_TEST&quot;] = TEST_NAME _html = contentWrapperElement + &quot; n n&quot; + f&quot;&lt;b&gt;{BITE_NAME} and {TEST_NAME} files written to local storage!&lt;/b&gt;&quot; HTML(_html) . Bite 110. Type conversion and exception handling ☆ . In this Bite you complete the divide_numbers function that takes a numerator and a denominator (the number above and below the line respectively when doing a division). . First you try to convert them to ints, if that raises a ValueError you will re-raise it (using raise). . To keep things simple we can expect this function to be called with int/float/str types only (read the tests why ...) . Getting passed that exception (no early bail out, we&#39;re still in business) you try to divide numerator by denominator returning its result. . If denominator is 0 though, Python throws another exception. Figure out which one that is and catch it. In that case return 0. . division.py and test_division.py files written to local storage! !cat $PB_FILE . def divide_numbers(numerator, denominator): &#34;&#34;&#34;For this exercise you can assume numerator and denominator are of type int/str/float. Try to convert numerator and denominator to int types, if that raises a ValueError reraise it. Following do the division and return the result. However if denominator is 0 catch the corresponding exception Python throws (cannot divide by 0), and return 0&#34;&#34;&#34; pass . Copy and paste the Code Template into the next cell. Write the solution and overwrite it to the file using the magic command %%writefile &lt;PB_FILE&gt; in the first line of the cell . print(f&quot;%%writefile {BITE_NAME}&quot;) . %%writefile division.py . %%writefile division.py def divide_numbers(numerator, denominator): try: numerator, denominator = int(numerator), int(denominator) result = numerator / denominator except ValueError as error: raise(error) except ZeroDivisionError as error: result = 0 return result . Overwriting division.py . Uncomment the next line and run it until passing tests with pytest . #!pytest [options] $PB_TEST #!pytest --capture=fd $PB_TEST !python -m pytest $PB_TEST print(f&quot;!python -m pytest -V {TEST_NAME}&quot;) . ============================= test session starts ============================== platform linux -- Python 3.6.9, pytest-3.6.4, py-1.8.1, pluggy-0.7.1 rootdir: /content, inifile: plugins: typeguard-2.7.1 collected 9 items test_division.py ......... [100%] =========================== 9 passed in 0.06 seconds =========================== !python -m pytest -V test_division.py . When you are sure that your code passes the Test, execute the next cell for ”SAVE AND RUN TESTS . with open(BITE_NAME, &quot;rb&quot;) as file: CODE = file.read() CODE = str(CODE).strip(&quot;b&quot;).strip(&quot;&#39;&quot;).strip(&#39;&quot;&#39;) js = f&quot;&quot;&quot;function MyCopyCodeToForm(){{ var code = `{CODE}`; document.getElementById(&#39;code&#39;).value = code; }} MyCopyCodeToForm(); var saveRunTest = document.getElementById(&#39;save&#39;); saveRunTest.setAttribute(&#39;onclick&#39;, &#39;return MyCopyCodeToForm();&#39;) saveRunTest.click(); &quot;&quot;&quot; driver.execute_script(js) print(&quot;SAVE AND RUN TESTS&quot;) . SAVE AND RUN TESTS .",
            "url": "https://oleksis.github.io/jupyter/python/selenium/pytest/jupyter/template/pybites/2020/03/20/19-pybites-selenium-template.html",
            "relUrl": "/python/selenium/pytest/jupyter/template/pybites/2020/03/20/19-pybites-selenium-template.html",
            "date": " • Mar 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "PyBites Template for Exercises",
            "content": "Intro . Este notebook se podrá usar como plantilla para resolver los ejercicios PyBites de la plataforma codechalleng.es . Uso . En la PyBites Platform selecciona un Bite Exercise y haz clic en GITHUB -&gt; DOWNLOAD BITE | Copiar este notebook a la carpeta pybites_biteXYZ, ejemplo: pybites_bite130. | Abrir el notebook y ejecutar todas las celdas ( Cell -&gt; Run All ). | Cargar (%load) el módulo python ejecutando la segunda celda (más abajo) para resolver ejercicio. | Escribir (%%writefile) al módulo python la respuesta al ejercicio. Leer la Nota para más detalles. | Ejecutar las pruebas, descomentar y ejecutar la última celda utilizando PyTest. . Note: El comando mágico de celda %%writefile debes estar en la primera línea, borra el comentario generado por el comando mágico de línea %load . | . from pathlib import Path from IPython.display import HTML BITE = &quot;./bite.html&quot; files = Path().glob(&quot;test_*.py&quot;) try: PYBITES = next(files) except StopIteration: raise(Exception(&quot;PYBITES_TEMPLATE &quot; + &quot;must be inside pybite_biteXYZ &quot; + &quot;folder with a test file&quot;)) if PYBITES: PYBITES = str(PYBITES).split(&quot;test_&quot;)[1] def write_imports(file=&quot;__imports.py&quot;, code=None, mode=&quot;w&quot;, seek=0): with open(file, mode) as pb: lines = &quot;&quot; if &quot;r&quot; in mode: lines = &quot;&quot;.join(pb.readlines()) lines = f&quot;{code} n{lines}&quot; pb.seek(seek) pb.truncate() pb.writelines(lines) HTML(filename=BITE) . CODE = f&quot;%load {PYBITES}&quot; write_imports(code=CODE) CODE = f&quot;%%writefile {PYBITES}&quot; write_imports(file=PYBITES, code=CODE, mode=&quot;r+&quot;, seek=0) %load __imports.py . #!pytest .",
            "url": "https://oleksis.github.io/jupyter/python/pytest/jupyter/template/pybites/2020/03/08/pybites-template-jupyter.html",
            "relUrl": "/python/pytest/jupyter/template/pybites/2020/03/08/pybites-template-jupyter.html",
            "date": " • Mar 8, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Threading vs Multiprocessing in Jupyter",
            "content": "El uso de la programación concurrente en Python es interesante y sorprendente. Experimentando con Carnets y Google Colaboratory he llegado a la conclusión que su uso se justifica según el problema a resolver. . En Carnet el uso de multiprocessing no esta soportado hasta ahora. Su creador Nicolas Holzschuch comenta lo siguiente: . The short answer is: &quot;you can&#39;t use multiprocessing with Carnets&quot;. I&#39;m sorry about that, but it is really too difficult to support.&gt; &gt;The long answer is: multiprocessing in Python relies on multiple calls to fork(), with a pool of process and a queue for tasks to be executed. iOS does not have the fork() system call, so there is no way to make this work, and I don&#39;t think there is one.&gt; Since most iPads have only 4 cores anyway (and some cores are already used by the system and the Jupyter server), I am not certain we would gain much processing power anyway. . En las siguientes celdas puedes observar y experimentar como se comporta el tiempo de ejecución en Jupyter usando Threading y Multiprocessing . %%writefile fibonacci.py def fibonacci(n): if n &lt; 2: return n return fibonacci(n - 1) + fibonacci(n - 2) . from concurrent.futures import ThreadPoolExecutor from fibonacci import fibonacci def fibs(n): &quot;&quot;&quot;Fibonacci sequentially&quot;&quot;&quot; for i in range(1, n + 1): _ = fibonacci(i) def fibs_thread(n): &quot;&quot;&quot;Fibonacci with Threads&quot;&quot;&quot; with ThreadPoolExecutor(max_workers=4) as exct: exct.map(fibonacci, range(1, n + 1)) if __name__ == &quot;__main__&quot;: N=30 %timeit fibs(N) print() %timeit fibs_thread(N) . from multiprocessing import Pool, cpu_count from fibonacci import fibonacci def fibs_multiprocess(n): &quot;&quot;&quot;Fibonacci with CPU Multiprocess&quot;&quot;&quot; with Pool(processes=cpu_count()) as cpu_pool: cpu_pool.map(fibonacci, range(1, n + 1)) if __name__ == &quot;__main__&quot;: N=30 %timeit fibs_multiprocess(N) . Referencias . Multiprocessing in Python on Windows and Jupyter/Ipython — Making it work | Speed up your code using multiprocessing in python | Python Multiprocessing Example | Process-based parallelism | .",
            "url": "https://oleksis.github.io/jupyter/python/jupyter/threading/multiprocessing/concurrent/timeit/carnets/2020/03/04/threading-multiprocessing-jupyter.html",
            "relUrl": "/python/jupyter/threading/multiprocessing/concurrent/timeit/carnets/2020/03/04/threading-multiprocessing-jupyter.html",
            "date": " • Mar 4, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Google JSON API Custom Search Engine for Pywombat",
            "content": "En este notebook utilizaremos la API de Google para búsquedas personalizadas sobre un sitio de interés, en este caso Pywombat. . Requerimientos . requests : Realizar peticiones API JSON de Google | pandas : Mostrar resultados en forma de Tabla | nbval : Realizar Test (py.test) sobre notebook | . # NBVAL_IGNORE_OUTPUT import json import requests import pandas as pd API_KEY=&quot;AIzaSyD6MLBUV45-lqHIOlfQ7xuGlkEaYMB7_P4&quot; URL_API=f&quot;https://www.googleapis.com/customsearch/v1?q=exercise&amp;cx=000045984045285095660:7xaecdr9bat&amp;key={API_KEY}&quot; results=dict() columns=(&#39;htmlTitle&#39;, &#39;link&#39;, &#39;htmlSnippet&#39;) def getResults(): data=dict() try: response=requests.get(URL_API) data=response.json() if &#39;error&#39; in data: raise Exception(f&quot;{data[&#39;error&#39;][&#39;message&#39;]}&quot;) except Exception as error: #print(f&quot;ERROR {error} in API {URL_API}&quot;) print(f&quot;ERROR in API {URL_API}&quot;) return data def loadExercise(): with open(&#39;pywombat.json&#39;, &#39;r&#39;) as f: data=json.load(f) return data[&#39;items&#39;] data=getResults() for idx, item in enumerate(data.get(&#39;items&#39;,[]), 1): title=item[&#39;htmlTitle&#39;] link=item[&#39;link&#39;] snippet=item[&#39;htmlSnippet&#39;] results[idx]={&#39;htmlTitle&#39;:title, &#39;link&#39;:link, &#39;htmlSnippet&#39;:snippet} df=pd.DataFrame(data=results, index=columns).T df . context=&quot;Pywombat Exercises&quot; assert (&quot;context&quot; in data and context == data[&#39;context&#39;][&#39;title&#39;]),&quot;Error in Google Custom Search API&quot; print(&quot;Google Search API working!&quot;) .",
            "url": "https://oleksis.github.io/jupyter/python/jupyter/requests/pandas/api/json/2020/02/29/customsearch-api-pywombat-live.html",
            "relUrl": "/python/jupyter/requests/pandas/api/json/2020/02/29/customsearch-api-pywombat-live.html",
            "date": " • Feb 29, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc: true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://oleksis.github.io/jupyter/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://oleksis.github.io/jupyter/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://oleksis.github.io/jupyter/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}